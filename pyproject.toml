[project]
name = "vmcp"
version = "1.0.0"
description = "Virtual Model Context Protocol - Unified MCP server gateway"
authors = [{name = "VMCP Team", email = "team@vmcp.dev"}]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
keywords = ["mcp", "ai", "gateway", "protocol", "server", "routing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]

dependencies = [
    "click>=8.1.0",
    "aiohttp>=3.9.0",
    "aiofiles>=23.0.0",
    "jsonschema>=4.20.0",
    "pydantic>=2.5.0",
    "toml>=0.10.2",
    "packaging>=23.2",
    "GitPython>=3.1.40",
    "websockets>=12.0",
    "prometheus-client>=0.19.0",
    "psutil>=5.9.0",
    "structlog>=23.2.0",
    "uvloop>=0.21.0",
    "mcp>=1.2.0",
    "fastmcp>=0.1.0",
    "typer>=0.9.0",
    "rich>=13.7.0",
    "httpx>=0.25.0",
    "tenacity>=8.2.0",
    "rich-click>=1.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

redis = [
    "redis>=5.0.0",
    "hiredis>=2.3.0",
]

monitoring = [
    "opentelemetry-api>=1.22.0",
    "opentelemetry-sdk>=1.22.0",
    "opentelemetry-instrumentation>=0.43b0",
]

[project.scripts]
vmcp = "vmcp.cli.main:cli"

[project.urls]
Homepage = "https://github.com/vmcp/vmcp"
Documentation = "https://vmcp.readthedocs.io"
Repository = "https://github.com/vmcp/vmcp"
Issues = "https://github.com/vmcp/vmcp/issues"

[build-system]
requires = ["setuptools>=68.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = "-v"

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP", "B", "A", "C4", "SIM", "PT"]
ignore = ["E501", "B008", "A003"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S311"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "git.*",
    "websockets.*",
    "prometheus_client.*",
    "aiofiles.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "ruff>=0.12.4",
]
